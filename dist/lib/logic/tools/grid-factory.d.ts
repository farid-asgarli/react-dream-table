/// <reference types="react" />
import { DataGridProps } from "../../types/DataGrid";
import { DataGridStyleProps, ColumnDefinitionExtended, GridDataType, GridTools, GroupedColumnHeaderDefinition } from "../../types/Utils";
export declare function useGridFactory<DataType extends GridDataType>(gridProps: DataGridProps<DataType>): {
    columnsToRender: {
        columns: ColumnDefinitionExtended<DataType>[];
        totalWidth: number;
    };
    groupedColumnHeaders: {
        unlockedGroupedColumnHeaders: GroupedColumnHeaderDefinition[] | undefined;
        leftLockedGroupedColumnHeaders: GroupedColumnHeaderDefinition[] | undefined;
        rightLockedGroupedColumnHeaders: GroupedColumnHeaderDefinition[] | undefined;
    };
    pinnedColumnsToRender: {
        leftColumns: ColumnDefinitionExtended<DataType>[];
        rightColumns: ColumnDefinitionExtended<DataType>[];
        leftWidth: number;
        rightWidth: number;
        totalWidth: number;
    } | undefined;
    gridTools: GridTools<DataType>;
    dataTools: {
        currentFilterFns: import("../../types/Utils").ICurrentFnCollection;
        currentSorting: import("../../types/Utils").ICurrentSorting | undefined;
        currentFilters: import("../../types/Utils").ICurrentFilterCollection;
        filterResetKey: number;
        prefetchedFilters: import("../../types/Utils").IPrefetchedFilter;
        progressReporters: Set<import("../../types/Utils").DataFetchingDefinition>;
        data: DataType[];
        currentPagination: import("../../types/DataGrid").DataGridPaginationProps;
        dataWithoutPagination: DataType[] | undefined;
        getColumnType: (key: string) => "number" | "text" | "select" | "date";
        isRangeFilterFn: (fnsKey: import("../../types/Utils").CompleteFilterFnDefinition) => boolean;
        isFilterFnActive: (colKey: string, activeKey: string | undefined) => boolean;
        getColumn: (key: string) => import("../../types/DataGrid").ColumnDefinition<DataType> | undefined;
        getColumnFilterFn: (key: string) => {
            current: import("../../types/Utils").CompleteFilterFnDefinition;
            default: import("../../types/Utils").CompleteFilterFnDefinition | undefined;
        };
        getColumnFilterValue: (key: string) => string | string[] | undefined;
        hydrateSelectInputs: () => void;
        pipeFetchedFilters: (key: string, asyncFetchCallback?: ((key: string, inputSearchValues?: string | undefined) => Promise<string[]>) | undefined) => Promise<void>;
        resetCurrentFilters: () => Promise<import("../../types/Utils").ICurrentFilterCollection>;
        resetFetchedFilters: (key?: string | undefined) => void;
        resetPagination: () => import("../../types/DataGrid").DataGridPaginationProps;
        setProgressReporters: import("react").Dispatch<import("react").SetStateAction<Set<import("../../types/Utils").DataFetchingDefinition>>>;
        updateCurrentSorting: (key: string, alg?: import("../../types/Utils").SortDirectionDefinition) => Promise<import("../../types/Utils").ICurrentSorting>;
        updateCurrentFilterFn: (key: string, type: import("../../types/Utils").CompleteFilterFnDefinition) => Promise<import("../../types/Utils").ICurrentFnCollection>;
        updateCurrentPagination: (valuesToUpdate: import("../../types/DataGrid").DataGridPaginationProps) => Promise<import("../../types/DataGrid").DataGridPaginationProps>;
        updatePrefetchedFilters: (key: import("../../types/DataGrid").KeyLiteralType<DataType>, value: string[]) => Promise<import("../../types/Utils").IPrefetchedFilter>;
        updateCurrentFilterValue: (key: string, value: string | string[]) => Promise<import("../../types/Utils").ICurrentFilterCollection>;
    } | {
        data: DataType[] | undefined;
        isFetching: boolean;
        paginationProps: {
            dataCount: number | undefined;
            pageSize?: number | undefined;
            currentPage?: number | undefined;
        };
        updateCurrentPagination: (valuesToUpdate: import("../../types/DataGrid").DataGridPaginationProps) => Promise<import("../../types/DataGrid").DataGridPaginationProps>;
        updateCurrentFilterValue: (key: string, value: string | string[]) => Promise<import("../../types/Utils").ICurrentFilterCollection>;
        pipeFetchedFilters: (key: string) => Promise<void>;
        resetCurrentFilters: () => Promise<import("../../types/Utils").ICurrentFilterCollection>;
        updateCurrentFilterFn: (key: string, type: import("../../types/Utils").CompleteFilterFnDefinition) => Promise<import("../../types/Utils").ICurrentFnCollection>;
        updateCurrentSorting: (key: string, alg?: import("../../types/Utils").SortDirectionDefinition) => Promise<import("../../types/Utils").ICurrentSorting>;
        currentFilterFns: import("../../types/Utils").ICurrentFnCollection;
        currentSorting: import("../../types/Utils").ICurrentSorting | undefined;
        currentFilters: import("../../types/Utils").ICurrentFilterCollection;
        filterResetKey: number;
        prefetchedFilters: import("../../types/Utils").IPrefetchedFilter;
        progressReporters: Set<import("../../types/Utils").DataFetchingDefinition>;
        currentPagination: import("../../types/DataGrid").DataGridPaginationProps;
        dataWithoutPagination: DataType[] | undefined;
        getColumnType: (key: string) => "number" | "text" | "select" | "date";
        isRangeFilterFn: (fnsKey: import("../../types/Utils").CompleteFilterFnDefinition) => boolean;
        isFilterFnActive: (colKey: string, activeKey: string | undefined) => boolean;
        getColumn: (key: string) => import("../../types/DataGrid").ColumnDefinition<DataType> | undefined;
        getColumnFilterFn: (key: string) => {
            current: import("../../types/Utils").CompleteFilterFnDefinition;
            default: import("../../types/Utils").CompleteFilterFnDefinition | undefined;
        };
        getColumnFilterValue: (key: string) => string | string[] | undefined;
        hydrateSelectInputs: () => void;
        resetFetchedFilters: (key?: string | undefined) => void;
        resetPagination: () => import("../../types/DataGrid").DataGridPaginationProps;
        setProgressReporters: import("react").Dispatch<import("react").SetStateAction<Set<import("../../types/Utils").DataFetchingDefinition>>>;
        updatePrefetchedFilters: (key: import("../../types/DataGrid").KeyLiteralType<DataType>, value: string[]) => Promise<import("../../types/Utils").IPrefetchedFilter>;
    };
    defaultStyling: DataGridStyleProps;
    dataGridProps: {
        icons: {
            ArrowDown: typeof import("../../icons/ArrowDown").default;
            ArrowLeft: typeof import("../../icons/ArrowLeft").default;
            ArrowRight: typeof import("../../icons/ArrowRight").default;
            ArrowUp: typeof import("../../icons/ArrowUp").default;
            CheckMark: typeof import("../../icons/CheckMark").default;
            ChevronDown: typeof import("../../icons/ChevronDown").default;
            ChevronUp: typeof import("../../icons/ChevronUp").default;
            ClearFilters: typeof import("../../icons/ClearFilters").default;
            ClearSorting: typeof import("../../icons/ClearSorting").default;
            Close: typeof import("../../icons/Close").default;
            Columns: typeof import("../../icons/Columns").default;
            ColumnGroup: typeof import("../../icons/ColumnGroup").default;
            DarkMode: typeof import("../../icons/DarkMode").default;
            Date: typeof import("../../icons/Date").default;
            Drag: typeof import("../../icons/Drag").default;
            Empty: typeof import("../../icons/Empty").default;
            FastForward: typeof import("../../icons/FastForward").default;
            FilterMenu: typeof import("../../icons/FilterMenu").default;
            FilterVisibility: typeof import("../../icons/FilterVisibility").default;
            FullScreen: typeof import("../../icons/FullScreen").default;
            Hidden: typeof import("../../icons/Hidden").default;
            Info: typeof import("../../icons/Info").default;
            Menu: typeof import("../../icons/Menu").default;
            Minus: typeof import("../../icons/Minus").default;
            MultiDot: typeof import("../../icons/MultiDot").default;
            NoResult: typeof import("../../icons/NoResult").default;
            PinLeft: typeof import("../../icons/PinLeft").default;
            PinRight: typeof import("../../icons/PinRight").default;
            Plus: typeof import("../../icons/Plus").default;
            Search: typeof import("../../icons/Search").default;
            Settings: typeof import("../../icons/Settings").default;
            ThreeDots: typeof import("../../icons/ThreeDots").default;
            Unpin: typeof import("../../icons/Unpin").default;
        };
        styling: {
            hoverColor: string;
            boxShadow: string;
            primaryColor: string;
            borderRadiusLg: string;
            borderRadiusMd: string;
            borderRadiusSm: string;
        };
        localization: {
            dataLoading: string;
            filterInputPlaceholder: string;
            filterDatePlaceholder: string;
            filterLoading: string;
            clearFilers: string;
            dataEmpty: string;
            noResult: string;
            paginationPageSize: string;
            paginationNext: string;
            paginationPrev: string;
            paginationTotalCount: string;
            filterButtonTitle: string;
            ascendingSortTitle: string;
            descendingSortTitle: string;
            clearSortTitle: string;
            rowExpandTitle: string;
            rowShrinkAllTitle: string;
            rowShrinkTitle: string;
            settingsMenuTitle: string;
            rowsSelectedTitle: string;
            selectOptionsLoading: string;
            selectPlaceholder: string;
            menuTitle: string;
            hideColumn: string;
            pinColumnToLeft: string;
            pinColumnToRight: string;
            unpinColumn: string;
            filterFunctions: string;
            filterContains: string;
            filterStartsWith: string;
            filterEndsWith: string;
            filterEquals: string;
            filterFuzzy: string;
            filterNotEquals: string;
            filterBetween: string;
            filterBetweenInclusive: string;
            filterGreaterThan: string;
            filterGreaterThanOrEqualTo: string;
            filterLessThan: string;
            filterLessThanOrEqualTo: string;
            filterEmpty: string;
            filterNotEmpty: string;
            fullScreenToggle: string;
            darkModeToggle: string;
            filterMenuVisibilityToggle: string;
            columnVisibilityOptions: string;
            aboutTitle: string;
            goBackTitle: string;
            groupedColumnToggle: string;
        };
        dimensions: {
            actionsMenuColumnWidth: number;
            selectionMenuColumnWidth: number;
            expandedMenuColumnWidth: number;
            defaultColumnWidth: number;
            defaultGroupedColumnHeight: number;
            defaultDataRowHeight: number;
            defaultHeadRowHeight: number;
            defaultExpandPanelHeight: number;
            minColumnResizeWidth: number;
            maxColumnResizeWidth: number;
            defaultHeaderFilterHeight: number;
            defaultFooterHeight: number;
            defaultScrollbarWidth: number;
            columnOffsetWidth: number;
        };
    };
    totalColumnsWidth: number;
    totalColumns: ColumnDefinitionExtended<DataType>[];
    initializedColumns: ColumnDefinitionExtended<DataType>[];
};
